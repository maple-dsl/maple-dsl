# suppress inspection "UnusedProperty" for whole file
# inspect the access of the variable
# 1. access from the root object field, it's not necessary to wrap "<var>" in explicitly.
# 2. access from the variable in direct, consider that wrap "<var>" in stern.

fetchV= \
   FETCH PROP ON <tag> <from> \
   YIELD <[selection,shadow_selection]; separator=","> \
   <if(function)> | YIELD <selection:{it|<it; format="$-.">,}> <function> <endif> \
   <if(order_asc&&order_desc)> | ORDER BY \
   <order_asc:{it|$-.<it>}; separator=",">  ASC, \
   <order_desc:{it|$-.<it>}; separator=","> DESC \
   <elseif(order_asc)> | ORDER BY <order_asc:{it|$-.<it>}; separator=",">  ASC \
   <elseif(order_desc)>| ORDER BY <order_desc:{it|$-.<it>}; separator=","> DESC \
   <endif> \
   <if(limit)> | OFFSET <offset> LIMIT <limit> <endif>

fetchE= \
   FETCH PROP ON <tag> <from:{it|<it.src> -> <it.dst>@<it.rank>}; separator=","> \
   YIELD <[selection,shadow_selection]; separator=","> \
   <if(function)> | YIELD <selection:{it|<it; format="$-.">,}> <function> <endif> \
   <if(order_asc&&order_desc)> | ORDER BY \
   <order_asc:{it|$-.<it>}; separator=",">  ASC, \
   <order_desc:{it|$-.<it>}; separator=","> DESC \
   <elseif(order_asc)> | ORDER BY <order_asc:{it|$-.<it>}; separator=",">  ASC \
   <elseif(order_desc)>| ORDER BY <order_desc:{it|$-.<it>}; separator=","> DESC \
   <endif> \
   <if(limit)> | OFFSET <offset> LIMIT <limit> <endif>

matchV= \
   LOOKUP ON <tag> \
   <if(where)> WHERE <where> <endif> \
   <if(!traverse)> YIELD <[selection,shadow_selection]; separator=","> \
   <if(function)> | YIELD <selection:{it|<it; format="$-.">,}> <function> <endif> \
   <if(order_asc&&order_desc)> | ORDER BY \
   <order_asc:{it|$-.<it>}; separator=",">  ASC, \
   <order_desc:{it|$-.<it>}; separator=","> DESC \
   <elseif(order_asc)> | ORDER BY <order_asc:{it|$-.<it>}; separator=",">  ASC \
   <elseif(order_desc)>| ORDER BY <order_desc:{it|$-.<it>}; separator=","> DESC \
   <endif> \
   <else> YIELD id(vertex) as dst \
   <endif> \
   <if(limit)>  | OFFSET <offset> LIMIT <limit> <endif> \
   <if(delete)> | DELETE <ref> \
   <elseif(detach)> DELETE <ref> WITH EDGE \
   <endif>

matchE= \
   LOOKUP ON <tag> \
   <if(where)> WHERE <where> <endif> \
   YIELD <[selection,shadow_selection]; separator=","> \
   <if(function)> | YIELD <selection:{it|<it; format="$-.">,}> <function> <endif> \
   <if(order_asc&&order_desc)> | ORDER BY \
   <order_asc:{it|$-.<it>}; separator=",">  ASC, \
   <order_desc:{it|$-.<it>}; separator=","> DESC \
   <elseif(order_asc)> | ORDER BY <order_asc:{it|$-.<it>}; separator=",">  ASC \
   <elseif(order_desc)>| ORDER BY <order_desc:{it|$-.<it>}; separator=","> DESC \
   <endif> \
   <if(limit)>  | OFFSET <offset> LIMIT <limit> <endif> \
   <if(delete)> | DELETE <ref> <endif>

#  use `go` will find the dangling edges, must append filter statement to fix it.
traversal= \
   <if(from)> GO <step_m> TO <step_n> STEPS FROM <from:{it|"<it>"}; separator=","> \
   <elseif(from_match)> | GO <step_m> TO <step_n> STEPS FROM $-.dst \
   <elseif(from_prev)>  | GO <step_m> TO <step_n> STEPS FROM $-.<from_prev> \
   <endif> \
   OVER <over; null="*", separator=","> \
   <if(direction_in)> REVERSELY <elseif(direction_both)> BIDIRECT <endif> \
   WHERE <where; null="id($$) IS NOT NULL", separator=" AND "> \
   YIELD \
   <if(companion)> <companion:{it|$-.<it> AS <it>}; separator=",">, <endif> \
   <[selection,shadow_selection]; separator=","> \
   <if(function)> | YIELD \
   <if(companion)><companion:{it|$-.<it> AS <it>}; separator=","> <endif> \
   <selection:{it|<it; format="$-.">,}> <function> \
   <endif> \
   <if(order_asc&&order_desc)> | ORDER BY \
   <order_asc:{it|$-.<it>}; separator=",">  ASC, \
   <order_desc:{it|$-.<it>}; separator=","> DESC \
   <elseif(order_asc)> | ORDER BY <order_asc:{it|$-.<it>}; separator=",">  ASC \
   <elseif(order_desc)>| ORDER BY <order_desc:{it|$-.<it>}; separator=","> DESC \
   <endif> \
   <if(limit)> | OFFSET <offset> LIMIT <limit> <endif> \
   <if(delete_vertex)>     | DELETE <out> \
   <elseif(detach_vertex)> | DELETE <out> WITH EDGE \
   <elseif(delete_edge)>   | DELETE <edge> \
   <endif>