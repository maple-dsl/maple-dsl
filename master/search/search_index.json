{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MapleDSL Documentation","text":""},{"location":"#purpose","title":"Purpose","text":"<p>It inspired by cypher-dsl like below:</p> <p>But the difference is that maple-dsl focuses more on traversal-style and lambda-style on development.</p> <p>The Maple-DSL has been developed with the needs of most graph database client(e.g. neo4j, nebula-graph-java, redisgraph, etc). We wanted to avoid string concatenations in our query generation and decided do go with a builder approach, much like we find with jOOQ or in the relational module of Spring Data JDBC.</p>"},{"location":"#quick_started","title":"Quick Started","text":""},{"location":"#prepare_dependencies","title":"Prepare dependencies","text":"<p>Please use a dependency management system. We recommend either Maven or Gradle.</p>"},{"location":"#cypher_configuration","title":"Cypher configuration","text":"<p>Inclusion of the Cypher-DSL in a Maven project <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;com.maple&lt;/groupId&gt;\n&lt;artifactId&gt;maple-cypher-dsl&lt;/artifactId&gt;\n&lt;version&gt;0.1.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p>"},{"location":"#nebulagraph_configuration","title":"NebulaGraph configuration","text":"<p>Inclusion of the Nebula-DSL in a Maven project <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;com.maple&lt;/groupId&gt;\n&lt;artifactId&gt;maple-nebula&lt;/artifactId&gt;\n&lt;version&gt;0.1.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p>"},{"location":"#examples","title":"Examples","text":"<p>List all Tom Hanks movies</p>"},{"location":"#skipped_vertexedge_structure_defined","title":"Skipped vertex&amp;edge structure defined","text":"<pre><code>G.traverse(G.vertex(\"Person\").eq(\"name\", \"Tom Hanks\"))\n.outE(\"ACTED_IN\")\n.outV(\"tomHanksMovies\", \"Movie\", it -&gt; it.selectAs(\"name\", \"movie_name\"));\n\n// Cypher: \n// MATCH (tom:`Person` {name: 'Tom Hanks'})-[:`ACTED_IN`]-&gt;(tomHanksMovies)\n// RETURN tomHanksMovies.name as movie_name\n\n// If The vertex ID of Tom Hanks is: person_001, you could try like below:\nG.traverse(\"person_001\")\n.outE(\"ACTED_IN\")\n.outV(\"tomHanksMovies\", \"Movie\", it -&gt; it.selectAs(\"name\", \"movie_name\"));\n\n// Cypher: \n// MATCH (tom:`Person`)-[:`ACTED_IN`]-&gt;(tomHanksMovies)\n// WHERE id(tom) == 'person_001'\n// RETURN tomHanksMovies.name as movie_name\n</code></pre>"},{"location":"#after_defined_vertexperson_vertexmovie_edgeacted_in","title":"After Defined vertex:Person, vertex:Movie, edge:ACTED_IN","text":"<pre><code>@Label(\"Person\")\nclass Person extends Model.V {\nString name;\n}\n\n@Label(\"Movie\")\nclass Movie extends Model.V {\nString name;\n}\n\n@Label(\"ACTED_IN\")\nclass ActedIn extends Model.E {\nint type;\n}\n\nG.traverse(G.vertex(Person.class).eq(Person::getName, \"Tom Hanks\"))\n.outE(ActedIn.class)\n.outV(\"tomHanksMovies\", Movie.class, it -&gt; it.selectAs(Movie::getName, \"movie_name\"));\n\n// If The vertex ID of Tom Hanks is: person_001, you could try like below:\nG.traverse(\"person_001\")\n.outE(ActedIn.class)\n.outV(\"tomHanksMovies\", Movie.class, it -&gt; it.selectAs(Movie::getName, \"movie_name\"));\n</code></pre> <p>List all Tom Hanks movies, then find out the other person which acted together. <pre><code>G.traverse(\"person_001\")\n.outE(ActedIn.class)\n.outV(\"tomHanksMovies\", Movie.class, it -&gt; it.selectAs(Movie::getName, \"movie_name\"))\n.inE(ActedIn.class)    .outV(\"others\", Person.class, it -&gt; it.selectAs(Person::getName, \"actor_name\"))\n\n// Cypher: \n// MATCH (tom:`Person` {name: 'Tom Hanks'})-[:`ACTED_IN`]-&gt;(tomHanksMovies)&lt;-[:`ACTED_IN`]-(others:`Person)\n// RETURN tomHanksMovies.name as movie_name, others.name as actor_name\n</code></pre></p>"},{"location":"1.getting-started/configure/","title":"Dependence Configure","text":""},{"location":"1.getting-started/configure/#maven_configuration","title":"Maven Configuration","text":"<pre><code>&lt;dependence&gt;\n&lt;group&gt;com.mapledsl&lt;/group&gt;\n&lt;artifactId&gt;maple-dsl&lt;/artifactId&gt;\n&lt;version&gt;0.1.0&lt;/version&gt;\n&lt;/dependence&gt;\n</code></pre>"},{"location":"1.getting-started/configure/#gradle_configuration","title":"Gradle Configuration","text":""}]}