{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MapleDSL Documentation","text":""},{"location":"#purpose","title":"Purpose","text":"<p>Note</p> <p>It inspired by cypher-dsl, But the difference is that maple-dsl focuses more on traversal-style and lambda-style on development.</p> <p>The Maple-DSL has been developed with the needs of most graph database client(e.g. neo4j, nebula-graph-java, redisgraph, etc). We wanted to avoid string concatenations in our query generation and decided do go with a builder approach, much like we find with jOOQ or in the relational module of Spring Data JDBC.</p>"},{"location":"#getting_started","title":"Getting Started","text":""},{"location":"#prepare_dependencies","title":"Prepare dependencies","text":"CypherNebulaGraph <p>Inclusion of the Cypher-DSL in a Maven project <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.github.maple-dsl&lt;/groupId&gt;\n    &lt;artifactId&gt;maple-dsl-cypher&lt;/artifactId&gt;\n    &lt;version&gt;1.0.2&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p> <p>Inclusion of the Nebula-DSL in a Maven project <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.github.maple-dsl&lt;/groupId&gt;\n    &lt;artifactId&gt;maple-dsl-nebula&lt;/artifactId&gt;\n    &lt;version&gt;1.0.2&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p>"},{"location":"#examples","title":"Examples","text":"<p>List all Tom Hanks movies released in the 1990s</p> constant<pre><code>G.traverse(G.vertex(\"Person\").eq(\"name\", \"Tom Hanks\"))\n    .outE(\"ACTED_IN\")\n    .outV(\"tomHanksMovies\", \"Movie\", it -&gt; it\n        .gte(\"released\", 1990)\n        .lt(\"released\", 2000)\n        .selectAs(\"released\", \"movie_released\")\n        .selectAs(\"name\", \"movie_name\"))\n    .render()   \n</code></pre> lambda function<pre><code>@Label(\"Person\")    Person(String name) extends Model.V\n@Label(\"Movie\")     Movie(String name, int released)  extends Model.V\n@Label(\"ACTED_IN\")  ActedIn(int type)   extends Model.E\n\nG.traverse(G.vertex(Person.class)\n    .eq(Person::getName, \"Tom Hanks\"))\n    .outE(ActedIn.class)\n    .outV(\"tomHanksMovies\", Movie.class, it -&gt;it\n        .gte(Movie::getReleased, 1990)\n        .lt(Movie::getReleased, 2000)\n        .selectAs(Movie::getName, \"movie_name\")\n        .selectAs(Movie::getReleased, \"movie_released\"))\n    .render()\n</code></pre> CypherNebulaGraph <pre><code>MATCH (tom:`Person` {name: 'Tom Hanks'})-[:`ACTED_IN`]-&gt;(tomHanksMovies)\nWHERE tomHanksMovies.released &gt;= 1990 AND tomHanksMovies.released &lt; 2000\nRETURN tomHanksMovies.name as movie_name, tomHanksMovies.released as movie_released\n</code></pre> <pre><code>LOOKUP ON `Person` WHERE Person.name == 'Tom Hanks' YIELD id(vertex) as _dst\n| GO FROM $-._dst OVER ACTED_IN WHERE $$.Movie.released &gt;= 1990 AND $$.Movie.released &lt; 2000\nYIELD $$.Movie.name as movie_name, $$.Movie.released as movie_released\n</code></pre> via vertex ID<pre><code>G.traverse(\"person_001\")\n    .outE(ActedIn.class)\n    .outV(\"tomHanksMovies\", Movie.class, it -&gt; it\n        .gte(Movie::getReleased, 1990)\n        .lt(Movie::getReleased, 2000)\n        .selectAs(Movie::getName, \"movie_name\")\n        .selectAs(Movie::getReleased, \"movie_released\"))\n    .render()\n</code></pre> CypherNebulaGraph <pre><code>MATCH (tom:`Person`)-[:`ACTED_IN`]-&gt;(tomHanksMovies)\nWHERE id(tom) == 'person_001' AND tomHanksMovies.released &gt;= 1990 AND tomHanksMovies.released &lt; 2000\nRETURN tomHanksMovies.name as movie_name, tomHanksMovies.released as movie_released\n</code></pre> <pre><code>GO FROM \"person_001\" OVER ACTED_IN WHERE $$.Movie.released &gt;= 1990 AND $$.Movie.released &lt; 2000\nYIELD $$.Movie.name as movie_name, $$.Movie.released as movie_released\n</code></pre> List all Tom Hanks movies released in the 1990s, then find out the other person which acted together <pre><code>G.traverse(\"person_001\")\n    .outE(ActedIn.class)\n    .outV(\"tomHanksMovies\", Movie.class, it -&gt;it\n        .gte(Movie::getReleased, 1990)\n        .lt(Movie::getReleased, 2000)\n        .selectAs(Movie::getName, \"movie_name\")\n        .selectAs(Movie::getReleased, \"movie_released\"))\n    .inE(ActedIn.class)    \n    .outV(\"other\", Person.class, it -&gt; it\n        .ne(Person::id, \"person_001\")\n        .selectAs(Person::getName, \"actor_name\"))\n    .render()\n</code></pre> CypherNebulaGraph <pre><code>MATCH (tom:`Person`-[:`ACTED_IN`]-&gt;(tomHanksMovies)&lt;-[:`ACTED_IN`]-(other:`Person`)\nWHERE id(tom) == 'person_001' AND tomHanksMovies.released &gt;= 1990 AND tomHanksMovies.released &lt; 2000 AND id(other) != 'person_001'\nRETURN tomHanksMovies.name as movie_name, tomHanksMovies.released as movie_released, others.name as actor_name\n</code></pre> <pre><code>GO FROM \"person_001\" OVER ACTED_IN WHERE $$.Movie.released &gt;= 1990 AND $$.Movie.released &lt; 2000\nYIELD id($$) AS _dst, $$.Movie.name AS movie_name, $$.Movie.released AS movie_released\n| GO FROM $-._dst OVER ACTED_IN REVERSELY WHERE id($$) != 'person_001' \nYIELD $$.Person.name AS actor_name, $-.movie_name AS movie_name, $-.movie_release AS movie_release\n</code></pre>"}]}